## unity testing
- chi lo fa? FILIPPO

## help: iniziare a rivedere: ANNA E GIULIA

## fare un print.pima? SUMMARY ETC. FILIPPO?
- print() call della funzione
- summary() con un minimo di sintesi (quanti modelli, quanti significativi con correzione etc)
- creare funzione extract_summary_table() o simili
- subset(), select()?

## coefficienti > 2 funzione di combinazione: LIVIO

## maxT.light. LIVIO 
- maxT.light deve essere quella di jointest, rimuovere dal package (vedi paolo_utils.R)

## pima()
- FATTO tdp_bounds: come fare in modo che la libreria non dipenda, ma se lo installi funziona? Oppure lo metto in sumSome come pima_sumSome o qualcosa del genere?
- global_tests: mettere anche un esempio con var categoriali e fare una funzione wrapper per combine_contrasts
- AGGIUNGERE NELL'HELP Correggere di default. Aggiungi argomento adjust=c("maxT","minp","none"), con default maxT. aggiungere note sulla scelta del metodo (@anna/livio) Anna: ho messo una cosa più generica, aggiungendo sia i p-value raw che corretti
- FATTO!! DECIDERE NOME. Fare un wrapper per jointest::combine (@filippo)
- Debuggare argomento "output_models" (per il momento non fa nulla, l'errore è in jointest). Togliere? Vedere gestione memoria? Vediamo se ci servono nelle funzioni per i plot, forse possiamo salvarci solo quello che ci serve. Forse togliere anche jointest, tanto la differenza di spazio usato è minima?
- FATTO! Togliere "output_models", "statistics", "score_type" e "seed". Ora ricadono in ...
- Nell'esempio, non serve più la riga "for(i in 1:length(mods)){mods[[i]]$call$data=eval(D)}" (tolto per pima(), controllare ed eventualmente debuggare le altre funzioni)
- Chiedere ad Angela per mettere sumSome in jointest. Lasciare anche su pima nell'esempio?
- Imprecisione nell'output di summary(global_tests(res, by = "Coeff")) (l'errore è in jointest, mette "Model=X1,X2...")
- Cosa fare con variabili categoriali?


## plot.pima
- secondo me adjusted dovrebbe essere il default, perché il nostro messaggio è proprio quello di correggere
- io nelle y forse preferirei mettere i pseudo Z, sono più intuititvi. 
- e nelle X proporrei quasi la correlazione parziale. quando le x hanno scale diverse, non sono più comparabili (esempio dataset pima)
- proposta: mettiamo nuovi argomenti (validi anche i nomi delle colonne della summary_table), anche il group per i colori?


- plot.pima scatter plot raw vs adjusted (zvalue(p) o -log10(p))

- vibration_plot  è l'attuale plot . avrebbe senso chiamarlo vibration_plot o qualcosa del genere visto che abbiamo anche definito la spec_curve()?

## spec_curve nell'esempio pima uso 3 trasformazioni di X, la spec_curve non funziona. e ha senso? (forse anche si, ma) i coefficienti sono su scale diverse. penso sia facilmente debuggabile

## zvalue e -log10 entrambe opzioni, zvalue default

## pima_tree 
- pima_tree come per plot.pima io credo che il default dovrebbe essere gli adjusted perché è questo che noi proponiamo come novità. continuo anche a pensare che dovremmo fare la classificazione significativo si/no piuttosto che stimare il p.value se non altro perché quest'ultimo è nell'intervallo 0-1 e i minimi quadrati non sono la perdita più adatta (cmq su questo secondo punto sono più flessibile, ci tengo di più al fatto che si usino gli adj
- deve usare i p adjusted, default classifica i p


- summary.pima <- jointest:::summary.jointest
o eliminare la funzione, dovrebbe prendere il metodo da jointest (la colonna .assign non va visualizzata, per questo lo dico. inoltre mi pare che per ora non ci sia nulla di diverso da mostrare

- nella vignette si dice "Since the overall p-value is lower than <0.05, we can select among the estimated models a significant model ". è preferibile dire che siccome c'è almeno un p aggiustato significativo possiamo scegliere quello che preferiamo. in realtà facendo maxt o minp le due cose corrispondono, ma non è vero in generale.


## dataset hurricane
- non è esportato come dataset, non so come mai. facendo document(): Errore: 'hurricane' non è un oggetto esportato dal 'namespace:pima'
- c'è uno scheletro di documentazione qualcuno la scriva
- le code di preprocessing di base le metterei direttamente nel dataset:
hurricane$gender_mf<-as.factor(hurricane$gender_mf)
hurricane$category<-as.factor(hurricane$category)
levels(hurricane$gender_mf)<-c("Male","Female")

## dataset pima
- includerlo nel package?

##########################################################
############### old
nomi automatici ai modelli: mod1, mod2, etc + (funzione get:)  tabella conversione mod* -> call (più avanti forse formula+family)
nomi automatici ai coefficiente testato: usa i coefficienti della model matrix: (.get_coeff_model_name)  "X @ mod1",  X1 @ mod1,  X2 @ mod1



object pima: 
- (list modelli) lunghezza nmodelli
- table di summary
- matrix Bxp test Tspace (p coefficienti testati)
- info_model (data.frame) nmodelli x quante colonne vogliamo (call, una colonna per ogni variabile) 

forse serve aggiungere un data.frame dove ogni riga descrive un modello, colonne diverse riportano le diverse trasformazioni operate (vedi anche tree_plot esplorativo)
non usare la tabella di summary per questo perché quella ha numero di righe pari al numero di coefficienti testati (possono essere più d'uno per modello). le due tabelle però devono essere collegate dalla chiave che è il modello ovviamente.


#######################################################
includere:
OK jointest con dati mancanti (livio)
- funzioni di manipolazione dati (outliers removal, leverage, trasformazioni varie, funzione che fa la grid delle combinazioni di tutte le trasfomazioni)
OK plot vibration of effects fatto con pseudo z o -log10(p) (y) inoltre effect size, hr o coefficiente (x) 
OK plot spec-curve (funzione paolo) cowplot (evitabile?)
OK plot esplorativo alberi regressione (funzione paolo):  p come numero o logico p<alpha: parametro della funzione? (default cosa?) 
- plot con boxplot per gruppi di modelli (ci pensa paolo se farli) 
OK vibration of effects: statistiche descritive? (ci pensa paolo)  RHR 99-01% dei coefficienti, RP: 99-01% dei -log10(pvalue)

# note filippo

- per come lo stiamo pensando ora, possiamo solo fare trasformazioni dentro la formula del modello, quindi tutto deve essere esplicito li oppure fare riferimento a due colonne diverse

mod1 <- lm(y ~ x)
mod2 <- lm(y ~ log(x))
# mod2 <- lm(y ~ xlog) # dove data ha una colonna che si chiama xlog

OK join_flipscores dovrebbe chiamarsi pima giusto?
- per integrarla con il pacchetto multiverse, un'opzione potrebbe essere quella di prendere un oggetto multiverse in input e lavorare su quello, se non sbaglio dovrebbe avere la lista di modelli
